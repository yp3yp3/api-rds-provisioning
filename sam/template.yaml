AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: Serverless RDS Cluster Automation (API Gateway → SNS → SQS → Lambda)

Parameters:
 
  GitHubRepoName:
    Type: String
    Description: "GitHub repository for Terraform PRs"

  GitHubToken:
    Type: String
    Description: "GitHub token to access the repository"
    NoEcho: true
  DomainName:
    Type: String
    Description: "Custom domain name for the API Gateway"

  CertificateArn:
    Type: String
    Description: "ARN of the SSL/TLS certificate for the custom domain"

Resources:

  GitHubTokenSecret:
    Type: AWS::SecretsManager::Secret
    Properties:
      Name: github-token-secret
      SecretString: !Ref GitHubToken # Store GitHub token securely in Secrets Manager

  # SNS Topic to publish incoming provisioning requests
  RDSRequestTopic:
    Type: AWS::SNS::Topic
    Properties:
      TopicName: rds-request-topic

  # SQS Queue for reliable and decoupled message handling
  RDSRequestQueue:
    Type: AWS::SQS::Queue
    Properties:
      QueueName: rds-request-queue
      VisibilityTimeout: 130

  # SNS Subscription to forward messages from SNS Topic to SQS Queue
  SNSToSQSSubscription:
    Type: AWS::SNS::Subscription
    Properties:
      TopicArn: !Ref RDSRequestTopic
      Protocol: sqs
      Endpoint: !GetAtt RDSRequestQueue.Arn
      RawMessageDelivery: true

  # Policy to allow SNS Topic to publish messages into the SQS Queue
  RDSRequestQueuePolicy:
    Type: AWS::SQS::QueuePolicy
    Properties:
      Queues:
        - !Ref RDSRequestQueue
      PolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service: sns.amazonaws.com
            Action: "sqs:SendMessage"
            Resource: !GetAtt RDSRequestQueue.Arn
            Condition:
              ArnEquals:
                aws:SourceArn: !Ref RDSRequestTopic

  # Lambda Function triggered by messages arriving in SQS
  RDSProvisionFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: rdsProvisionFunction
      Runtime: python3.12
      Handler: handler.lambda_handler
      CodeUri: lambda/
      MemorySize: 256
      Timeout: 120
      Environment:
        Variables:
          GITHUB_TOKEN_SECRET_NAME: !Ref GitHubTokenSecret
          GITHUB_REPO_NAME: !Ref GitHubRepoName
      Policies:
        - SQSPollerPolicy:  # Permission to poll SQS
            QueueName: !GetAtt RDSRequestQueue.QueueName
        - AWSSecretsManagerGetSecretValuePolicy:  # Access to GitHub token stored securely
            SecretArn: !Ref GitHubTokenSecret
      Events:
        SQSEvent:
          Type: SQS
          Properties:
            Queue: !GetAtt RDSRequestQueue.Arn
            BatchSize: 1

  # API Gateway to receive HTTP requests and forward them to SNS Topic
  ApiGateway:
    Type: AWS::Serverless::Api
    Properties:
      StageName: Prod
      EndpointConfiguration: REGIONAL
      AccessLogSetting:
        DestinationArn: !GetAtt ApiGatewayLogGroup.Arn
        Format: '{ "requestId":"$context.requestId", "ip":"$context.identity.sourceIp", "requestTime":"$context.requestTime", "httpMethod":"$context.httpMethod", "routeKey":"$context.routeKey", "status":"$context.status", "responseLength":"$context.responseLength" }'
      DefinitionBody:
        openapi: 3.0.1
        info:
          title: RDS Provisioning API
          version: '1.0'
        paths:
          /provision:
            post:
              responses:
                '200':
                  description: "Request accepted"
                  content:
                    application/json:
                      schema:
                        type: object
              x-amazon-apigateway-integration:
                uri: !Sub "arn:aws:apigateway:${AWS::Region}:sns:path//${RDSRequestTopic}"
                credentials: !GetAtt ApiGatewaySnsRole.Arn
                passthroughBehavior: when_no_templates
                httpMethod: POST
                type: aws
                requestParameters:
                  integration.request.header.Content-Type: "'application/x-www-form-urlencoded'"
                requestTemplates:
                  application/json: |
                    Action=Publish&TopicArn=$util.urlEncode('arn:aws:sns:${AWS::Region}:${AWS::AccountId}:rds-request-topic')&Message=$input.body
                responses:
                  default:
                    statusCode: 200
                    responseTemplates:
                      application/json: |
                        {
                          "message": "Request accepted"
                        }

  ApiGatewayDeployment:
    Type: AWS::ApiGateway::Deployment
    DependsOn: ApiGateway
    Properties:
      RestApiId: !Ref ApiGateway

  ApiGatewayProdStage:
    Type: AWS::ApiGateway::Stage
    Properties:
      StageName: Prod
      RestApiId: !Ref ApiGateway
      DeploymentId: !Ref ApiGatewayDeployment




  # IAM Role allowing API Gateway to publish messages to SNS
  ApiGatewaySnsRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service: apigateway.amazonaws.com
            Action: sts:AssumeRole
      Policies:
        - PolicyName: ApiGatewayPublishToSNS
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action: sns:Publish
                Resource: !Ref RDSRequestTopic
  # Custom Domain for API Gateway
  ApiGatewayDomain:
    Type: AWS::ApiGateway::DomainName
    Properties:
      DomainName: !Ref DomainName
      EndpointConfiguration:
        Types:
          - REGIONAL
      RegionalCertificateArn: !Ref CertificateArn

  # Mapping Custom Domain to API Gateway Stage
  ApiBasePathMapping:
    Type: AWS::ApiGateway::BasePathMapping
    DependsOn: ApiGatewayProdStage
    Properties:
      DomainName: !Ref ApiGatewayDomain
      RestApiId: !Ref ApiGateway
      Stage: Prod
  
  ApiGatewayCloudWatchRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service: apigateway.amazonaws.com
            Action: sts:AssumeRole
      Policies:
        - PolicyName: ApiGatewayCloudWatchLogs
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                Resource: "*"
  
  # CloudWatch log groups for API Gateway & SQS monitoring
  ApiGatewayLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub "/aws/apigateway/${ApiGateway}"
      RetentionInDays: 14

  SQSLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub "/aws/sqs/${RDSRequestQueue.QueueName}"
      RetentionInDays: 14

  LambdaErrorAlarm:
    Type: AWS::CloudWatch::Alarm
    Properties:
      AlarmName: "LambdaErrorAlarm"
      AlarmDescription: "Alarm when Lambda errors exceed threshold"
      Namespace: "AWS/Lambda"
      MetricName: "Errors"
      Dimensions:
        - Name: "FunctionName"
          Value: !Ref RDSProvisionFunction
      Statistic: Sum
      Period: 60
      EvaluationPeriods: 1
      Threshold: 1
      ComparisonOperator: GreaterThanOrEqualToThreshold
      AlarmActions:
        - !Ref SNSErrorTopic

  SNSErrorTopic:
    Type: AWS::SNS::Topic
    Properties:
      TopicName: "cloudwatch-alerts"

  CloudWatchDashboard:
    Type: AWS::CloudWatch::Dashboard
    Properties:
      DashboardName: "RDS_Provisioning_Dashboard"
      DashboardBody: !Sub |
        {
          "widgets": [
            {
              "type": "metric",
              "x": 0,
              "y": 0,
              "width": 6,
              "height": 6,
              "properties": {
                "metrics": [
                  [ "AWS/Lambda", "Invocations", "FunctionName", "${RDSProvisionFunction}" ],
                  [ ".", "Errors", ".", "." ]
                ],
                "view": "timeSeries",
                "stacked": false,
                "region": "${AWS::Region}",
                "title": "Lambda Invocations & Errors"
              }
            },
            {
              "type": "metric",
              "x": 6,
              "y": 0,
              "width": 6,
              "height": 6,
              "properties": {
                "metrics": [
                  [ "AWS/SQS", "ApproximateNumberOfMessagesDelayed", "QueueName", "${RDSRequestQueue}" ],
                  [ ".", "NumberOfMessagesSent", ".", "." ]
                ],
                "view": "timeSeries",
                "stacked": false,
                "region": "${AWS::Region}",
                "title": "SQS Queue Monitoring"
              }
            }
          ]
        }







Outputs:
  ApiGatewayUrl:
    Description: "API Gateway Endpoint URL for RDS Provisioning"
    Value: !Sub "https://${ApiGateway}.execute-api.${AWS::Region}.amazonaws.com/Prod/provision"

  RDSProvisionFunctionArn:
    Description: "ARN of the Lambda Function"
    Value: !GetAtt RDSProvisionFunction.Arn
