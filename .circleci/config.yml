version: 2.1  # CircleCI version

executors:
  terraform-executor:
    docker:
      - image: hashicorp/terraform:latest
    working_directory: ~/repo

jobs:
  deploy_sam:
    docker:
      - image: public.ecr.aws/sam/build-python3.8:latest
    steps:
      - checkout  # Fetch latest code

      - run:
          name: Check for changes in `sam/`
          command: |
            if git diff --quiet HEAD~1 -- sam/; then
              echo "No changes detected in 'sam/'. Skipping deployment."
              circleci step halt
            fi

#      - run:
 #         name: Install AWS CLI
  #        command: |
   #         apk add --no-cache aws-cli

      - run:
          name: Build SAM Application
          command: |
            cd sam
            sam build
            cd ..

      - run:
          name: Deploy SAM Application with GitHubToken
          command: |
            cd sam
            sam deploy \
              --no-confirm-changeset \
              --no-fail-on-empty-changeset \
              --parameter-overrides GitHubToken=$GITHUB_TOKEN
            cd ..

  terraform-apply:
    executor: terraform-executor
    steps:
      - checkout  # Pull the latest code from the repository

      - run:
          name: Check for changes in `terraform/`
          command: |
            if git diff --quiet HEAD~1 -- terraform/; then
              echo "No changes detected in 'terraform/'. Skipping deployment."
              circleci step halt
            fi

      - run:
          name: Install AWS CLI & Dependencies
          command: |
            apk add --no-cache jq aws-cli curl
            aws --version  # Verify installation  
      
      # Initialize Terraform and  Apply changes automatically
      - run:
          name: Terraform Apply
          command: |
            cd terraform
            terraform init
            terraform plan 
            terraform apply -auto-approve 
            cd ..


      # Step 4: Retrieve Terraform Outputs
      - run:
          name: Get Terraform Outputs
          command: |
            # Get the latest commit message (which triggered this pipeline)
            COMMIT_MSG=$(git log -1 --pretty=%B)

            # Extract the database name from the commit message (matching PR format)
            NEW_DB_NAME=$(echo "$COMMIT_MSG" | sed -nE 's/.*Provision RDS: ([^ ]+).*/\1/p')

            if [ -z "$NEW_DB_NAME" ]; then
              echo "No new environment found from commit message, skipping."
              exit 0
            fi

            cd terraform
            
            DB_SECRET_ARN=$(terraform output -json rds_secrets_arns | jq -r --arg db "$NEW_DB_NAME" '.[$db]')
            echo "DB_SECRET_ARN=\"$DB_SECRET_ARN\"" >> $BASH_ENV

            SLACK_ID=$(grep -A 2 "$NEW_DB_NAME" terraform.tfvars | awk -F '"' '/slack_id/ {print $6; exit}')

            echo "SLACK_ID=\"$SLACK_ID\"" >> $BASH_ENV
            cd ..
      - run:
          name: Send Slack Notification
          command: |
            source $BASH_ENV || true
            if [ -z "$SLACK_BOT_TOKEN" ] || [ -z "$SLACK_ID" ]; then
              echo "Skipping Slack Notification because SLACK_BOT_TOKEN or SLACK_ID is empty."
              exit 0
            fi

            # AWS CLI command to retrieve the secret value
            AWS_CLI_CMD="aws secretsmanager get-secret-value --secret-id $DB_SECRET_ARN --query 'SecretString' --output text"
            echo $SLACK_ID

            curl -X POST "https://slack.com/api/chat.postMessage" \
            -H "Authorization: Bearer $SLACK_BOT_TOKEN" \
            -H "Content-Type: application/json" \
            -d '{
              "channel": "'"$SLACK_ID"'",
              "text": "ðŸš€ *New RDS Secret Created!*",
              "attachments": [
                {
                  "color": "#36a64f",
                  "fields": [
                    {
                      "title": "ðŸ”— Secret ARN",
                      "value": "'"$DB_SECRET_ARN"'",
                      "short": false
                    },
                    {
                      "title": "ðŸ“Œ Retrieve Secret via AWS CLI",
                      "value": "```'"$AWS_CLI_CMD"'```",
                      "short": false
                    }
                  ]
                }
              ]
            }'
  find_old_environments:
    executor: terraform-executor
    steps:
      - checkout  # Pull the latest code from the repository

      - run:
          name: Install AWS CLI & jq
          command: |
            apk add --no-cache jq aws-cli curl

      - run:
          name: Identify Old Non-Prod Databases
          command: |
            cd terraform
            CURRENT_DATE=$(date +%s)
            DAYS_TO_KEEP=${DAYS_TO_KEEP:-14}  # Default to 14 days if not set
            terraform init
            RDS_CREATION_DATES=$(terraform output -json rds_creation_dates)
            OLD_DBS=""

            while read -r entry; do
              DB_NAME=$(echo "$entry" | jq -r '.key')

              if grep -q "$DB_NAME" terraform.tfvars | grep -q 'environment = "prod"'; then
                echo "$DB_NAME is a prod environment, skipping."
                continue
              fi

              CREATION_DATE=$(echo "$entry" | jq -r '.value')
              CREATION_DATE_EPOCH=$(date -d "$(echo "$CREATION_DATE" | sed -E 's/T/ /; s/Z//')" +%s)
              AGE_DAYS=$(( (CURRENT_DATE - CREATION_DATE_EPOCH) / 86400 ))

              if [ "$AGE_DAYS" -ge "$DAYS_TO_KEEP" ]; then
                echo "$DB_NAME is older than $DAYS_TO_KEEP days and not prod, adding to list."
                OLD_DBS="$OLD_DBS $DB_NAME"
              fi
            done < <(echo "$RDS_CREATION_DATES" | jq -c 'to_entries[]')

            echo "OLD_DBS=\"$OLD_DBS\"" >> $BASH_ENV
            cd ..

      - run:
          name: Comment Out Old Databases in terraform.tfvars
          command: |
            # Load OLD_DBS from environment variable
            source $BASH_ENV || true

            # Exit early if there are no old databases
            if [ -z "$OLD_DBS" ]; then
              echo "No old databases to mark as deprecated. Skipping."
              exit 0
            fi
            
            cd terraform
            TFVARS_FILE="terraform.tfvars"

            # Initialize PR_BODY message
            PR_BODY="This PR automatically comments out the following environments older than $DAYS_TO_KEEP days:\n\n"

            # Loop through each old database and comment it out
            for DB_NAME in $OLD_DBS; do
              echo "Commenting out $DB_NAME in terraform.tfvars..."
              sed -i "/^[[:space:]]*$DB_NAME[[:space:]]*=/ s/^/# /" $TFVARS_FILE
              PR_BODY="$PR_BODY- $DB_NAME\n"
            done
            echo "PR_BODY=\"$PR_BODY\"" >> $BASH_ENV
            cd ..
      - run:
          name: Create PR for Deprecated Environments
          command: |
            source $BASH_ENV || true
            if [ -z "$PR_BODY" ]; then
              echo "No changes detected, skipping PR creation."
              exit 0
            fi

            cd terraform
            # Configure Git
            git config --global user.email "circleci-bot@example.com"
            git config --global user.name "CircleCI Bot"

            # Create a new branch
            BRANCH_NAME="cleanup-old-environments-$(date +%Y%m%d%H%M%S)"
            git checkout -b "$BRANCH_NAME"

            # Commit changes
            git add terraform.tfvars
            git commit -m "Mark old environments as deprecated in terraform.tfvars"

            # Push branch to origin
            git push --force origin "$BRANCH_NAME"

            # Create Pull Request via GitHub API
            PR_TITLE="Mark old environments as deprecated"
            
            REPO=$(git config --get remote.origin.url | sed -E 's/.*github.com[:\/]([^\.]+).*/\1/')

            curl -X POST -H "Authorization: token $GITHUB_TOKEN" \
              -H "Accept: application/vnd.github.v3+json" \
              https://api.github.com/repos/$REPO/pulls \
              -d '{
                "title": "'"$PR_TITLE"'",
                "body": "'"$PR_BODY"'",
                "head": "'"$BRANCH_NAME"'",
                "base": "main"
              }'

            cd ..


workflows:
  version: 2
  deploy_and_manage:
    jobs:
      - deploy_sam:
          filters:
            branches:
              only: main
      - terraform-apply:
          filters:
            branches:
              only: main
      - find_old_environments:
          filters:
            branches:
              only: main
