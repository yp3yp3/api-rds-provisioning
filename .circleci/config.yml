version: 2.1  # CircleCI version

executors:
  terraform-executor:
    docker:
      - image: hashicorp/terraform:latest
    working_directory: ~/repo

jobs:
  terraform-apply:
    executor: terraform-executor
    steps:
      - checkout  # Pull the latest code from the repository

      # Install AWS CLI to allow Terraform to interact with AWS resources
      - run:
          name: Install AWS CLI
          command: |
            apk add --no-cache aws-cli
            aws --version  # Verify installation  

      
      # Identify the latest modified `.tfvars` file from the last commit
      - run:
          name: Find Latest tfvars File
          command: |
            LATEST_FILE=$(git diff --name-only HEAD^ HEAD | grep '\.tfvars$' | tail -n 1)
            if [ -z "$LATEST_FILE" ]; then
              echo "No tfvars file changed, skipping apply."
              circleci-agent step halt  # Stop pipeline if no changes detected
              exit 0
            fi
            
            # Extract the filename without path and extension
            BASENAME=$(basename "$LATEST_FILE" .tfvars)
            echo "Extracted Name: $BASENAME"
            echo "Latest Terraform vars file: $LATEST_FILE"
            echo "export LATEST_FILE=$LATEST_FILE" >> $BASH_ENV  # Save it for the next steps
            echo "export BASENAME=$BASENAME" >> $BASH_ENV  # Save it for the next steps
      
      # Initialize Terraform (fetch provider plugins and configure backend)
      - run:
          name: Terraform Init
          command: |
            source $BASH_ENV
            cd terraform
            terraform init -backend-config="key=environments/${BASENAME}.tfstate"
            cd ..

      # Change directory to Terraform and run Terraform Plan
      - run:
          name: Terraform Plan
          command: |
            source $BASH_ENV
            cd terraform
            terraform plan -var-file="../$LATEST_FILE" -lock=false
            cd ..

      # Apply changes automatically without manual approval
      - run:
          name: Terraform Apply
          command: |
            source $BASH_ENV
            cd terraform
            terraform apply -auto-approve -var-file="../$LATEST_FILE" -lock=false
            cd ..
      # Step 4: Retrieve Terraform Outputs
      - run:
          name: Get Terraform Outputs
          command: |
            source $BASH_ENV
            cd terraform
            DB_USER=$(terraform output -raw db_username)
            DB_PASS=$(terraform output -raw db_password)
            DB_ENDPOINT=$(terraform output -raw db_endpoint)
            SLACK_ID=$(awk -F '"' '/slack_user_id/ {print $2}' ../$LATEST_FILE)
            echo "DB_USER=$DB_USER" >> $BASH_ENV
            echo "DB_PASS=\"$DB_PASS\"" >> "$BASH_ENV"
            echo "DB_ENDPOINT=$DB_ENDPOINT" >> $BASH_ENV
            echo "SLACK_ID=$SLACK_ID" >> $BASH_ENV
            cd ..
      - run:
          name: Send Slack Notification
          command: |
            source $BASH_ENV
            if [ -z "$SLACK_BOT_TOKEN" ] || [ -z "$SLACK_ID" ]; then
              echo "Skipping Slack Notification because SLACK_BOT_TOKEN or SLACK_ID is empty."
              exit 0
            fi
            apk add --no-cache curl
            curl -X POST "https://slack.com/api/chat.postMessage" \
            -H "Authorization: Bearer $SLACK_BOT_TOKEN" \
            -H "Content-Type: application/json" \
            -d '{
              "channel": "'"$SLACK_ID"'",
              "text": "ðŸš€ *New RDS Instance Created!*",
              "attachments": [
                {
                  "color": "#36a64f",
                  "fields": [
                    {"title": "ðŸ”‘ Username", "value": "'"$DB_USER"'", "short": true},
                    {"title": "ðŸ”‘ db_password", "value": "'"$DB_PASS"'", "short": true},
                    {"title": "ðŸ”— Endpoint", "value": "'"$DB_ENDPOINT"'", "short": false}
                  ]
                }
              ]
            }'
      - run:
          name: Destroy old environments
          command: |
            cd terraform

            DAYS_TO_KEEP=0

            echo "Removing environments not modified in the last $DAYS_TO_KEEP days (except prod)..."

            # Find all *.tfvars files that have not been modified in more than $DAYS_TO_KEEP days
            for tfvars_file in $(find terraform/environments/ -maxdepth 1 -type f -name "*.tfvars" -mtime +$DAYS_TO_KEEP); do
              
              # Check if this file has "environment = \"prod\"" inside it
              if grep -q 'environment\s*=\s*"prod"' "$tfvars_file"; then
                echo "Skipping '$tfvars_file' (environment=prod)."
                continue
              fi

              echo "File '$tfvars_file' is older than $DAYS_TO_KEEP days -> destroying environment..."

              # Extract the environment name from the file name (removing .tfvars extension)
              environment_name="$(basename "$tfvars_file" .tfvars)"
              echo "Environment name: $environment_name"

              # Initialize Terraform with any relevant backend configuration
              terraform init -backend-config="key=environments/${environment_name}.tfstate"

              # Destroy resources using this .tfvars file
              terraform destroy -auto-approve

            done
            cd ..

workflows:
  version: 2
  apply-on-merge:
    jobs:
      - terraform-apply:
          filters:
            branches:
              only: main  # This workflow triggers ONLY when merging into `main`
